name: app-build-action-dev22

on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'

jobs:
  # 打包Android、iOS、Mac
  build-mac-ios-android:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
        with:
          ref: dev

      # 设置JAVA环境
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: "17"
          cache: "gradle"

      # 设置Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.x'
          cache: true

      # 打开MAC Desktop支持
      - name: Enable Flutter Desktop
        run: flutter config --enable-macos-desktop

      # 更新Flutter的packages
      - name: Restore packages
        run: |
          cd simple_live_app
          flutter pub get

      # 安装appdmg
      - name: Install appdmg
        run: npm install -g appdmg

      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      # APK签名设置
      - name: Setup Android Signing
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > simple_live_app/android/keystore.jks
          cat > simple_live_app/android/key.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.STORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          EOF

      # 打包APK
      - name: Build APK
        run: |
          cd simple_live_app
          flutter build apk --release --split-per-abi

      #上传Artifacts
      - name: Upload APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: simple_live_app/build/app/outputs/flutter-apk/*-release.apk

      # TV APK签名设置
      - name: Setup Android TV Signing
        run: |
          echo "${{ secrets.TV_KEYSTORE_BASE64 }}" | base64 -d > simple_live_tv_app/android/keystore_tv.jks
          cat > simple_live_tv_app/android/key.properties << EOF
          storeFile=keystore_tv.jks
          storePassword=${{ secrets.TV_STORE_PASSWORD }}
          keyPassword=${{ secrets.TV_KEY_PASSWORD }}
          keyAlias=${{ secrets.TV_KEY_ALIAS }}
          EOF

      #打包 Android TV APK
      - name: Build TV APK
        run: |
          cd simple_live_tv_app
          flutter build apk --release --split-per-abi
          
      #上传TV APK至Artifacts
      - name: Upload TV APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android_tv
          path: simple_live_tv_app/build/app/outputs/flutter-apk/*-release.apk

      #打包iOS
      - name: Build IPA
        run: |
          cd simple_live_app
          flutter build ios --release --no-codesign

      #创建未签名ipa
      - name: Create IPA
        run: |
          cd simple_live_app/build/ios/iphoneos
          mkdir -p Payload
          cp -R Runner.app Payload/
          zip -qr ios_no_sign.ipa Payload
          cd ../../../..

      # 上传IPA至Artifacts
      - name: Upload IPA to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: simple_live_app/build/ios/iphoneos/ios_no_sign.ipa

      # 打包MAC
      - name: Build MacOS
        run: |
          cd simple_live_app
          flutter_distributor package --platform macos --targets dmg,zip --skip-clean
      
      # 上传MAC至Artifacts
      - name: Upload MacOS to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: simple_live_app/build/dist/*/*

      #完成
      - name: Final Status
        run: echo "🍏 This job's status is ${{ job.status }}."

  # 打包Linux
  build-linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
        with:
          ref: dev
          
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
          
      # 安装依赖
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv
          
      # 打开Linux Desktop支持
      - name: Enable Flutter Desktop
        run: flutter config --enable-linux-desktop
        
      # 更新Flutter的packages
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
          
      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
        
      # build Linux ZIP\DMG
      - name: Build Linux
        run: |
          cd simple_live_app
          flutter_distributor package --platform linux --targets deb,zip --skip-clean
          
      # 上传Linux包至Artifacts
      - name: Upload Linux APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: simple_live_app/build/dist/*/*
          
      #完成
      - name: Final Status
        run: echo "🍏 Linux job's status is ${{ job.status }}."

  # 打包Windows
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
        with:
          ref: dev
          
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
          
      - name: Enable Flutter Desktop
        run: flutter config --enable-windows-desktop
        
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
          
      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
        
      # build Windows ZIP\MSIX
      - name: Build Windows
        run: |
          cd simple_live_app
          flutter_distributor package --platform windows --targets msix,zip --skip-clean
          
      # 上传Windows至Artifacts
      - name: Upload Windows APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: simple_live_app/build/dist/*/*
          
      #完成
      - name: Final Status
        run: echo "🍏 Windows job's status is ${{ job.status }}."
